import SwiftUI

// MARK: - „É¢„Éá„É´
struct WordCard: Identifiable, Hashable {
    let id: String
    let word: String
    let meaning: String
    let pos: PartOfSpeech
}
enum PartOfSpeech: String, CaseIterable, Identifiable,Hashable {
    case noun = "üêª ÂêçË©û", verb = "üêà ÂãïË©û", adj = "üêá ÂΩ¢ÂÆπË©û", adv = "ü¶ô ÂâØË©û"
    var id: String { rawValue }
}

// MARK: - „Çµ„É≥„Éó„É´„Éá„Éº„ÇøÔºàÂæå„Åß„Çµ„Éº„ÉêÈÄ£Êê∫„Å´ÁΩÆÊèõÔºâ
struct SampleDeck {
    static let all: [WordCard] = [
        // noun
        .init(id:"forest", word:"forest", meaning:"Ê£Æ", pos:.noun),
        .init(id:"mushroom", word:"mushroom", meaning:"„Åç„ÅÆ„Åì", pos:.noun),
        .init(id:"rabbit", word:"rabbit", meaning:"„ÅÜ„Åï„Åé", pos:.noun),
        .init(id:"stream", word:"stream", meaning:"Â∞èÂ∑ù", pos:.noun),
        .init(id:"leaf", word:"leaf", meaning:"Ëëâ", pos:.noun),
        .init(id:"trail", word:"trail", meaning:"Â∞èÂæÑ", pos:.noun),
        // verb
        .init(id:"wander", word:"wander", meaning:"„Åï„Åæ„Çà„ÅÜ", pos:.verb),
        .init(id:"whisper", word:"whisper", meaning:"„Åï„Åï„ÇÑ„Åè", pos:.verb),
        .init(id:"gaze", word:"gaze", meaning:"Ë¶ã„Å§„ÇÅ„Çã", pos:.verb),
        .init(id:"glow", word:"glow", meaning:"„Åª„ÅÆ„Åã„Å´ÂÖâ„Çã", pos:.verb),
        .init(id:"flutter", word:"flutter", meaning:"„Å≤„Çâ„Å≤„ÇâËàû„ÅÜ", pos:.verb),
        .init(id:"breathe", word:"breathe", meaning:"ÊÅØ„Çí„Åô„Çã", pos:.verb),
        // adj
        .init(id:"gentle", word:"gentle", meaning:"Á©è„ÇÑ„Åã„Å™", pos:.adj),
        .init(id:"quiet", word:"quiet", meaning:"Èùô„Åã„Å™", pos:.adj),
        .init(id:"bright", word:"bright", meaning:"Êòé„Çã„ÅÑ", pos:.adj),
        .init(id:"mossy", word:"mossy", meaning:"Ëãî„ÇÄ„Åó„Åü", pos:.adj),
        .init(id:"curious", word:"curious", meaning:"Â•ΩÂ•áÂøÉÊó∫Áõõ„Å™", pos:.adj),
        .init(id:"shy", word:"shy", meaning:"ÊÅ•„Åö„Åã„Åó„Åå„Çä„ÅÆ", pos:.adj),
        // adv
        .init(id:"softly", word:"softly", meaning:"„ÇÑ„Åï„Åó„Åè", pos:.adv),
        .init(id:"slowly", word:"slowly", meaning:"„ÇÜ„Å£„Åè„Çä", pos:.adv),
        .init(id:"silently", word:"silently", meaning:"Èùô„Åã„Å´", pos:.adv),
        .init(id:"almost", word:"almost", meaning:"„Åª„Å®„Çì„Å©", pos:.adv),
        .init(id:"barely", word:"barely", meaning:"„Åã„Çç„ÅÜ„Åò„Å¶", pos:.adv),
        .init(id:"truly", word:"truly", meaning:"Êú¨ÂΩì„Å´", pos:.adv),
    ]
    static func filtered(by pos: PartOfSpeech) -> [WordCard] { all.filter { $0.pos == pos } }
}

// MARK: - My Collection ‰øùÂ≠ò
final class MyCollectionStore: ObservableObject {
    @Published private(set) var ids: Set<String> = []
    private let key = "mycollection.ids"
    init() {
        if let saved = UserDefaults.standard.array(forKey: key) as? [String] {
            ids = Set(saved)
        }
    }
    func toggle(_ id: String) {
        if ids.contains(id) { ids.remove(id) } else { ids.insert(id) }
        UserDefaults.standard.set(Array(ids), forKey: key)
    }
    func contains(_ id: String) -> Bool { ids.contains(id) }
}

// MARK: - HOME Êú¨‰Ωì
struct HomePage: View {
    @EnvironmentObject var hw: HomeworkState     // ‚Üê ËøΩÂä†
    @State private var showBannerAlert = false   // ‚Üê ËøΩÂä†
    @State private var searchText = ""
    // HomePage „ÅÆ struct ÂÜÖÔºàbody „ÅÆÂ§ñÔºâ„Å´ÁΩÆ„Åè
    private let bookmarkColors: [Color] = [.red, .blue, .green, .orange, .purple]
    var body: some View {
        NavigationStack{
            ZStack {
                Color.homeIvory.ignoresSafeArea()
                
                ScrollView {
                }                 // „Çø„Ç§„Éà„É´
                VStack(alignment: .leading, spacing: 4) {
                    
                    NavigationLink {
                        WordCardPage(
                            pos: .adj,
                            baseVariantIndex: hw.variantIndex(for: .adj),
                            items: itemsFor(.adj)
                        )
                    } label: {                        // ‚Üê ÂçäËßí„Ç≥„É≠„É≥ ":" „ÇíÂøÖ„Åö‰ΩøÁî®
                        Text("ÂΩ¢ÂÆπË©û„É¨„ÉÉ„Çπ„É≥„Å∏")
                            .font(.headline)
                            .padding(.vertical, 8)
                    }
                    // ‚Ä¶„Åì„ÅÆ‰∏ã„Å´Êó¢Â≠ò„ÅÆUI„ÅåÁ∂ö„Åè‚Ä¶
                }
                HomeworkBanner()
                HomeworkRecentWidget()
                
                HStack(spacing: 8) {
                    
                    Text("Words' Forest")
                        .font(.system(size: 34, weight: .bold))
                    Text("üè†")
                        .font(.system(size: 34))
                        .accessibilityLabel("„Éõ„Éº„É†")
                }
                Text("A gentle vocabulary journey")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }
            // üîç Ê§úÁ¥¢Ôºà‚Üê„Çø„Ç§„Éà„É´„ÅÆÁõ¥Âæå„Å´ÁΩÆ„ÅèÔºâ
            HStack(spacing: 8) {
                TextField("ÂçòË™û„ÇíÊ§úÁ¥¢ÔºàËã±Ë™û„ÉªÊó•Êú¨Ë™ûÔºâ", text: $searchText)
                    .textFieldStyle(.roundedBorder)
                
                NavigationLink("Ê§úÁ¥¢") {
                    POSFlashcardView(
                        title: "Ê§úÁ¥¢ÁµêÊûú",
                        cards: SampleDeck.all.filter { c in
                            let q = searchText.trimmingCharacters(in: .whitespaces)
                            guard !q.isEmpty else { return false }
                            return c.word.localizedCaseInsensitiveContains(q)
                            || c.meaning.localizedCaseInsensitiveContains(q)
                        },
                        accent: .gray.opacity(0.6),
                        animalName: "adj_rabbit_gray"
                    )
                }
                .disabled(searchText.trimmingCharacters(in: .whitespaces).isEmpty)
                .buttonStyle(ColoredPillButtonStyle(color: .blue))
            }
            .padding(.top, 12)
            
            // „ÄéÂçòË™û„Ç´„Éº„ÉâÂ≠¶Áøí„ÄèÂêÑÂìÅË©û„Å∏
            VStack(alignment: .leading, spacing: 8) {
                Text("„ÄéÂçòË™û„Ç´„Éº„ÉâÂ≠¶Áøí„ÄèÂêÑÂìÅË©û„Å∏").font(.headline)
                
                let poses = Array(PartOfSpeech.allCases)
                ForEach(poses.indices, id: \.self) { i in
                    let pos = poses[i]

                    NavigationLink {
                        // ‚Üê „Åì„Åì„ÅßÈÅ∑ÁßªÂÖà„Çí‚ÄúÁõ¥Êé•‚Äù„Å§„Åè„ÇãÊñπÂºèÔºàÁ¢∫ÂÆü„Å´Âãï„ÅèÔºâ
                        POSFlashcardView(
                            title: pos.rawValue,                                  // üêª„ÅØ‰ªò„Åë„Å™„ÅÑ
                            cards: Array(SampleDeck.filtered(by: pos).prefix(4)),
                            accent: accentFor(pos),
                            animalName: animalNameFor(pos)
                        )
                    } label: {
                        HStack {
                            Text(pos.rawValue).foregroundStyle(.blue)
                            Spacer()
                            Image(systemName: "chevron.right").foregroundStyle(.secondary)
                        }
                        .padding(.vertical, 6)
                    }
                    .buttonStyle(.plain)
                }
                .padding(.top, 8)
                // üîñ Ê†ûÔºàËâ≤ÂõõËßí„Åù„Çå„Åû„ÇåÈÅ∑ÁßªÔºâ
                HStack(spacing: 10) {
                    Text("üîñ Ê†û„Å∏").font(.subheadline)
                    ForEach(bookmarkColors, id: \.self) { c in
                        BookmarkColorItem(color: c)
                    }
                }
                
                // üçÑ My Collection
                NavigationLink("üçÑ My CollectionÔºàË¶ö„Åà„Å´„Åè„ÅÑÂçòË™ûÔºâ") {
                    MyCollectionView()
                }
                .buttonStyle(ColoredPillButtonStyle(color: Color.pink))
                
                // üê∫ „Ç≥„É©„É†„Éö„Éº„Ç∏
                NavigationLink("üê∫ „Ç≥„É©„É†„Éö„Éº„Ç∏ÔºàColumnPageÔºâ") {
                    ColumnPage()
                }
                .buttonStyle(ColoredPillButtonStyle(color: Color.indigo))
                
                Spacer(minLength: 8) // ‚Ä¶Êó¢Â≠ò„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„Åü„Å°‚Ä¶
            }
            .padding()// ‚Üê VStack„Å∏„ÅÆ„Éë„Éá„Ç£„É≥„Ç∞
            
        } // ‚Üê NavigationStack „ÅÆÈñâ„Åò„Ç´„ÉÉ„Ç≥
        
        .navigationDestination(for: PartOfSpeech.self) { pos in
            POSFlashcardView(
                title: pos.rawValue,  // üêª„ÅØ‰ªò„Åë„Å™„ÅÑ„ÄÇ‰ªò„Åë„Çã„Å™„ÇâÈÅ∑ÁßªÂÖà„Å†„Åë„Åß
                cards: Array(SampleDeck.filtered(by: pos).prefix(4)),
                accent: accentFor(pos),
                animalName: animalNameFor(pos)
            )
        }
    }// ‚Üê body „ÅÆÈñâ„Åò„Ç´„ÉÉ„Ç≥Ôºà„Åì„Åì„ÅØ1ÂÄã„Å†„ÅëÔºÅÔºâ
    // MARK: - Helpers (body„ÅÆÂ§ñ)
    private func itemsFor(_ pos: PartOfSpeech) -> [WordItem] {
        // SampleDeck.filtered(by:) „ÅåÁÑ°„ÅÑÂ†¥Âêà„Åß„ÇÇÂãï„ÅèÂÆâÂÖ®Áâà
        let list = SampleDeck.all.filter { $0.pos == pos }
        return Array(list.prefix(12)).map { WordItem(text: $0.word) }
    }
    // VStackÔºà‰∏≠Ë∫´Ôºâ„Åì„Åì„Åæ„Åß
    
    
    //            .alert("‚ö†Ô∏è Wi-FiÁí∞Â¢É„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì", isPresented: $showCellularAlert) {
    //                Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) {}
    //                Button("ÂèñÂæó„Åô„ÇãÔºàÈÄö‰ø°Èáè„Åå„Åã„Åã„Çä„Åæ„ÅôÔºâ", role: .destructive) {
    //                    performRefresh(allowCellular: true)
    //                }
    //            } message: {
    //                Text("Wi-Fi„Åß„ÅØ„Å™„ÅÑ„Åü„ÇÅ„ÄÅÈÄö‰ø°Èáè„ÇíÊ∂àË≤ª„Åó„Åæ„Åô„ÄÇÂèñÂæó„Åó„Åæ„Åô„ÅãÔºü")
    //            }
    
    // ÁîªÂÉèÂêç„ÇíÂìÅË©û„Åî„Å®„Å´Ëøî„ÅôÔºàHomePage „ÅÆ‰∏≠„Éªbody „ÅÆÂ§ñÔºâ
    private func animalNameFor(_ pos: PartOfSpeech) -> String {
        switch pos {
        case .noun: return "noun_bear_brown"
        case .verb: return "verb_cat_gray"
        case .adj:  return "adj_rabbit_white"
        case .adv:  return "adv_alpaca_ivory"
        }
    }
    // MARK: - „ÉÄ„Éü„ÉºÊõ¥Êñ∞ÔºàHomePage „ÅÆ‚Äú‰∏≠„Éªbody„ÅÆÂ§ñ‚ÄùÔºâ
    //   private func performRefresh(allowCellular: Bool = false) {
    //      guard !isUpdating else { return }
    //      isUpdating = true
    //      DispatchQueue.main.asyncAfter(deadline: .now() + 0.6) {
    //         pendingCount = 0
    //          lastUpdated = Date()
    //           isUpdating = false
    //        }
    //    }
    // ‚Üê „Åì„Åì„Åß **HomePage „ÇíÈñâ„Åò„Çã**ÔºàÊúÄÂæå„ÅÆ1ÂÄã„Å†„ÅëÔºâ
    // ÂìÅË©û‚Üí„Ç¢„ÇØ„Çª„É≥„ÉàËâ≤ÔºàÂæå„ÅßHex„Å´Â∑Æ„ÅóÊõø„ÅàÂèØÔºâ
    func accentFor(_ pos: PartOfSpeech) -> Color {
        switch pos {
        case .noun:       return Color(red: 0.96, green: 0.78, blue: 0.83) // #F4C7D3 Ëøë‰ºº
        case .verb:       return Color(red: 0.63, green: 0.75, blue: 0.90) // ÂãïË©ûÁ≥ª„Éñ„É´„ÉºËøë‰ºº
        case .adj:        return Color(red: 0.72, green: 0.89, blue: 0.78) // #B7E4C7 Ëøë‰ºº
        case .adv:        return Color(red: 1.00, green: 0.95, blue: 0.69) // #FFF3B0 Ëøë‰ºº
        }
    }
    struct ColumnPage: View {
        var body: some View {
            ColumnTOCView()
        }
    }
    struct MyCollectionView: View {
        var body: some View {
            VStack(spacing: 16) {
                Text("My Collection")
                    .font(.title3).bold()
                
                Text("„Åì„Åì„Å´‚ÄúË¶ö„Åà„Å´„Åè„ÅÑÂçòË™û‚Äù„Åå‰∏¶„Å≥„Åæ„Åô„ÄÇ\n‰ªä„ÅØ„ÉÄ„Éü„ÉºË°®Á§∫„Åß„Åô„ÄÇ")
                    .multilineTextAlignment(.center)
                    .foregroundColor(.secondary)
                    .padding(.horizontal)
                
                // Âæå„ÅßÊú¨ÂÆüË£Ö„Å´Â∑Æ„ÅóÊõø„Åà„Çã:
                // WordListView(title: "My Collection", cards: picked)
            }
            .padding()
            .navigationTitle("My Collection")
        }
    }
    // „ÉÄ„Éü„ÉºÊõ¥Êñ∞Ôºà„ÅÆ„Å°„Å´ UpdateCenter „Å∏Â∑Æ„ÅóÊõø„ÅàÔºâ
    //private func performRefresh(allowCellular: Bool = false) {
    //  guard !isUpdating else { return }
    // isUpdating = true
    // DispatchQueue.main.asyncAfter(deadline: .now() + 0.6) {
    //   pendingCount = 0
    //  lastUpdated = Date()
    //  isUpdating = false
    //  }
    //}
    //} // ‚Üê „Åì„Åì„Åß struct HomePage „ÇíÈñâ„Åò„ÇãÔºàÊúÄÂæå„ÅÆ1ÂÄã„Å†„ÅëÔºâ
    
    // MARK: - SampleDeck Êã°Âºµ
}
        extension SampleDeck {
            static var nouns: [WordCard] {
                all.filter { $0.pos == .noun }
            }
            static var adjectives: [WordCard] {
                all.filter { $0.pos == .adj }
            }
        }
        // ====== „Åì„Åì„Åã„Çâ„ÅØ ‚Äúbody „ÅÆÂ§ñÂÅ¥‚Äù „Å´ÁΩÆ„ÅèÂÆ£Ë®Ä„Åü„Å° ======
        
        // MARK: - Á¥¢ÂºïÔºè„Ç≥„É©„É†ÔºàÈùí„É™„É≥„ÇØÁâàÔºâ
        struct IndexPage: View {
            var body: some View {
                List {
                    Section("„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„ÉàÈ†Ü") {
                        NavigationLink {
                            AlphabetIndexView()
                        } label: {
                            Text("A ‚Ä¶ ZÔºàÂÆüË£Ö‰∫àÂÆöÔºâ")
                                .foregroundColor(.blue)
                        }
                    }
                    Section("„Å≤„Çâ„Åå„Å™‰∫îÂçÅÈü≥È†Ü") {
                        NavigationLink {
                            KanaIndexView()
                        } label: {
                            Text("„ÅÇ ‚Ä¶ „ÇìÔºàÂÆüË£Ö‰∫àÂÆöÔºâ")
                                .foregroundColor(.blue)
                        }
                    }
                    Section("„Ç≥„É©„É†ÁõÆÊ¨°") {
                        NavigationLink {
                            ColumnTOCView()
                        } label: {
                            Text("No. „Å®„Çø„Ç§„Éà„É´‰∏ÄË¶ßÔºàÂÆüË£Ö‰∫àÂÆöÔºâ")
                                .foregroundColor(.blue)
                        }
                    }
                }
                .listStyle(.insetGrouped)
                .navigationTitle("Á¥¢Âºï„Éö„Éº„Ç∏")
            }
        }
        
        struct AlphabetIndexView: View {
            var body: some View {
                Text("„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„ÉàÈ†Ü„ÅÆÁ¥¢Âºï„Éö„Éº„Ç∏ÔºàÂÆüË£Ö‰∫àÂÆöÔºâ")
                    .padding()
                    .navigationTitle("A ‚Ä¶ Z")
            }
        }
        
        struct KanaIndexView: View {
            var body: some View {
                Text("„Å≤„Çâ„Åå„Å™Á¥¢Âºï„Éö„Éº„Ç∏ÔºàÂÆüË£Ö‰∫àÂÆöÔºâ")
                    .padding()
                    .navigationTitle("„ÅÇ ‚Ä¶ „Çì")
            }
        }
        
        struct ColumnTOCView: View {
            var body: some View {
                Text("„Ç≥„É©„É†ÁõÆÊ¨°ÔºàNo. „Å®„Çø„Ç§„Éà„É´‰∏ÄË¶ß„ÉªÂÆüË£Ö‰∫àÂÆöÔºâ")
                    .padding()
                    .navigationTitle("„Ç≥„É©„É†ÁõÆÊ¨°")
            }
        }
        
        
        // MARK: - Ê†ûÔºöËâ≤ÂõõËßí„ÅÆ1„Ç¢„Ç§„ÉÜ„É†ÔºàÊäº„Åó„Å¶ÈÅ∑ÁßªÔºâ
        struct BookmarkColorItem: View {
            let color: Color
            var body: some View {
                NavigationLink(destination: BookmarkPage(color: color)) {
                    RoundedRectangle(cornerRadius: 4)
                        .fill(color)
                        .frame(width: 28, height: 28)
                }
                .buttonStyle(.plain)
            }
        }
        
        // MARK: - ÂçòË™û„É™„Çπ„ÉàÔºàÂìÅË©ûÂà•/Ê§úÁ¥¢ÁµêÊûúÂÖ±ÈÄöÔºâ
        /*    struct POSFlashcardView: View {
         let title: String
         let cards: [WordCard]
         // @EnvironmentObject var collection: MyCollectionStore
         @State private var tempPicked: Set<String> = []
         var body: some View {
         List {
         ForEach(cards) { card in
         HStack {
         VStack(alignment: .leading, spacing: 4) {
         Text(card.word).font(.headline)
         Text(card.meaning).foregroundColor(.secondary)
         }
         Spacer()
         Button {
         //   collection.toggle(card.id)
         // } label: {
         // Image(systemName: //collection.contains(card.id) ? //
         //"heart.fill" : "heart")
         
         if tempPicked.contains(card.id) {
         tempPicked.remove(card.id)
         } else {
         tempPicked.insert(card.id)
         }
         } label: {
         Image(systemName: tempPicked.contains(card.id) ? "heart.fill" : "heart")
         }
         .buttonStyle(.borderless)
         .foregroundColor(.pink)
         
         }
         .padding(.vertical, 4)
         }
         }
         .navigationTitle(title)
         }
         }
         */
        // MARK: - My Collection ÁîªÈù¢
        //struct MyCollectionView: View {
        var body: some View {
            VStack(spacing: 16) {
                Text("My Collection").font(.title3).bold()
                Text("„Åì„Åì„Å´‚ÄúË¶ö„Åà„Å´„Åè„ÅÑÂçòË™û‚Äù„Åå‰∏¶„Å≥„Åæ„Åô„ÄÇ\n‰ªä„ÅØ„ÉÄ„Éü„ÉºË°®Á§∫„Åß„Åô„ÄÇ")
                    .multilineTextAlignment(.center)
                    .foregroundColor(.secondary)
                    .padding(.horizontal)
            }
            .padding()
            .navigationTitle("My Collection")
        }
        //}
        
        // MARK: - Ê†û„Éö„Éº„Ç∏Ôºà‰ªÆÔºâ
        struct BookmarkPage: View {
            let color: Color
            var body: some View {
                ZStack {
                    color.opacity(0.12).ignoresSafeArea()
                    Text("„Åì„ÅÆËâ≤„ÅÆÊ†û„Éö„Éº„Ç∏„Åß„Åô").padding()
                }
                .navigationTitle("Ê†û„Éö„Éº„Ç∏")
            }
        }
        
    


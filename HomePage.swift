import SwiftUI

struct HomePage: View {
    @EnvironmentObject var router: Router
    @EnvironmentObject var hw: HomeworkState
    
    @State private var searchText = ""
    @FocusState private var searchFocused: Bool
    @State private var showBannerAlert = false
    @State private var showRecent = false
    
    // Ê†û„ÅØ‰ªä„ÅØÈùûË°®Á§∫ÔºàÂøÖË¶Å„Å´„Å™„Å£„Åü„Çâ trueÔºâ
    private let showBookmarks = false
    private let bookmarkColors: [Color] = [.red, .blue, .green, .orange, .purple]
    
    var body: some View {
        ZStack {
            Color.homeIvory.ignoresSafeArea()
            //           Color(.systemGroupedBackground)
            //                .ignoresSafeArea()
            ScrollView {
                VStack(alignment: .leading, spacing: 8) {
                    
                    // ‚ë† „Çø„Ç§„Éà„É´Ôºà„Éä„Éì„Çø„Ç§„Éà„É´„ÅØ‰Ωø„Çè„Å™„ÅÑÔºâ
                    HStack(spacing: 8) {
                        Spacer()
                        Text("Home Page")
                            .font(.system(size: 34, weight: .bold))
                            .foregroundStyle(.primary)
                        Text("üè†")
                            .font(.system(size: 28))
                            .accessibilityLabel("„Éõ„Éº„É†")
                        Spacer()
                    }
                    .padding(.horizontal, 16)
                    .padding(.top, 12)
                    
                    
                    // ‚ë° Ê§úÁ¥¢
                    HStack(spacing: 8) {
                        TextField("ÂçòË™û„ÇíÊ§úÁ¥¢ÔºàËã±Ë™û„ÉªÊó•Êú¨Ë™ûÔºâ", text: $searchText)
                            .textFieldStyle(.roundedBorder)
                            .focused($searchFocused)
                        // üîé Ê§úÁ¥¢„Éú„Çø„É≥ÔºàÁµêÊûúÁîªÈù¢„Å∏ÈÅ∑ÁßªÔºâ
                        NavigationLink {
                            // --- ÈÅ∑ÁßªÂÖà„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Åì„Åì„ÅßÁµÑ„ÅøÁ´ã„Å¶ ---
                            let q = searchText.trimmingCharacters(in: .whitespacesAndNewlines)
                            
                            // ÂÖ®ÂìÅË©û„Åã„Çâ„Çµ„É≥„Éó„É´„ÇíÈõÜÁ¥Ñ
                            let allSamples: [WordCard] = PartOfSpeech.allCases.flatMap { SampleDeck.filtered(by: $0) }
                            
                            // „Éï„Ç£„É´„ÇøÊù°‰ª∂ÔºöËã±ÂçòË™û / Êó•Êú¨Ë™û / ‰∏çË¶èÂâáÂãïË©û3ÂΩ¢„ÅÆ„Å©„Çå„Åã„Å´„Éí„ÉÉ„Éà
                            let cards: [WordCard] = allSamples.filter { c in
                                guard !q.isEmpty else { return false }
                                if c.word.localizedCaseInsensitiveContains(q) { return true }
                                if c.meaning.localizedCaseInsensitiveContains(q) { return true }
                                let forms = IrregularVerbBank.forms(for: c.word) ?? []
                                return forms.contains { $0.localizedCaseInsensitiveContains(q) }
                            }
                            
                            POSFlashcardView(
                                title: "Ê§úÁ¥¢ÁµêÊûú",
                                cards: cards,
                                accent: .gray.opacity(0.6),
                                background: Color(.systemGray6),
                                animalName: "index_chipmunk",
                                reversed: false,
                                onEdit: { _ in }
                            )
                        } label: {
                            Text("Ê§úÁ¥¢")
                        }
 /*                       .disabled(searchText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)*/
                        .buttonStyle(.borderedProminent)
                        .tint(.blue)
                    }
                    .buttonStyle(.automatic)
                    .onAppear { searchFocused = false }
                    .scrollDismissesKeyboard(.interactively)
                        
                        // ‚ë¢ ‰ªä„Çµ„Ç§„ÇØ„É´ / Êñ∞ÁùÄÔºàÊó¢Â≠ò„ÅÆ„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Çí„Åù„ÅÆ„Åæ„ÅæÔºâ
                        Group {
                            HomeworkBanner()
                                .overlay(alignment: .topTrailing) {
                                    WeeklySetMiniButton()              // ‚Üê Âè≥‰∏ä„Å´Èáç„Å≠„Çã
                                        .padding(.top, 8)
                                        .padding(.trailing, 8)
                                }
                            
                            // üÜï Êñ∞ÁùÄÊÉÖÂ†±ÔºàÁõ¥Ëøë4‰ª∂Ôºâ
                            VStack(alignment: .leading, spacing: 8) {
                                HStack {
                                    Label("Êñ∞ÁùÄÊÉÖÂ†±ÔºàÁõ¥Ëøë4‰ª∂Ôºâ", systemImage: "sparkles")
                                        .font(.headline)
                                    Spacer()
                                    Button(showRecent ? "Èö†„Åô" : "Ë°®Á§∫") {
                                        withAnimation(.snappy) { showRecent.toggle() }
                                    }
                                }
                                NavigationLink("Â±•Ê≠¥„Çí„Åô„Åπ„Å¶Ë¶ã„Çã") {
                                    HistoryAllView()
                                }
                                .font(.subheadline)
                                
                                if showRecent {
                                    HomeworkRecentWidget()
                                        .transition(.move(edge: .top).combined(with: .opacity))
                                }
                            } // ‚Üê „Åì„Åì„Åß„Åì„ÅÆ VStack „ÇíÈñâ„Åò„Çã
                            .padding(.horizontal)      // ‚Üê Áõ¥Âæå„Å´‰øÆÈ£æÂ≠ê„ÉÅ„Çß„Éº„É≥
                            .padding(.vertical, 4)     // ‚Üê Áõ¥Âæå„Å´‰øÆÈ£æÂ≠ê„ÉÅ„Çß„Éº„É≥
                            
                            // „Åì„Åì„Åã„ÇâÊ¨°„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥ÔºàÂà•„ÅÆ VStack „ÅßOKÔºâ
                            // ‚ë£ „ÄéÂçòË™û„Ç´„Éº„ÉâÂ≠¶Áøí„ÄèÂêÑÂìÅË©û„Å∏ÔºàpushÊñπÂºèÔºâ
                            VStack(alignment: .leading, spacing: 8) {
                                Text("„ÄéÂçòË™û„Ç´„Éº„ÉâÂ≠¶Áøí„ÄèÂêÑÂìÅË©û„Å∏").font(.headline)
                                
                                posRow(PartOfSpeech.noun, title: "üêªÂêçË©û",  color: .pink)
                                posRow(PartOfSpeech.verb, title: "üêàÂãïË©û",  color: .blue)
                                posRow(PartOfSpeech.adj,  title: "üêáÂΩ¢ÂÆπË©û", color: .green)
                                posRow(PartOfSpeech.adv,  title: "ü¶ôÂâØË©û",  color: .orange)
                            }
                            
                            // ‚ë§ Ê†ûÔºà‰ªä„ÅØÈùûË°®Á§∫Ôºâ
                            if showBookmarks {
                                HStack(spacing: 10) {
                                    Text("üîñ Ê†û„Å∏").font(.subheadline)
                                    ForEach(bookmarkColors, id: \.self) { color in
                                        BookmarkColorItem(color: color)
                                    }
                                }
                            }
                            // ‚ë• „Åù„ÅÆ‰ªñ„Éö„Éº„Ç∏ÔºàStub„ÄÇ„ÅÇ„Å®„ÅßÊú¨Áâ©„Å´Â∑Æ„ÅóÊõø„ÅàÔºâ
                            VStack(spacing: 8) {
                                NavigationLink("‚úèÔ∏è  „Çπ„Éö„É™„É≥„Ç∞„Éª„ÉÅ„É£„É¨„É≥„Ç∏") { SpellingChallengeView() }
                                    .buttonStyle(ColoredPillButtonStyle(color: .purple, size: .compact, alpha: 0.20))
                                
                                NavigationLink("üíó  My CollectionÔºàË¶ö„Åà„Å´„Åè„ÅÑÂçòË™ûÔºâ") { MyCollectionView() }
                                    .buttonStyle(ColoredPillButtonStyle(color: .pink, size: .compact, alpha: 0.20))
                                
                                // Ë¶ö„Åà„ÅüBOX„Å∏
                                NavigationLink {
                                    LearnedBoxView()
                                } label: {
                                    Text("üì¶  Ë¶ö„Åà„ÅüBOX")
                                }
                                .buttonStyle(ColoredPillButtonStyle(color: .green, size: .compact, alpha: 0.20))
                                
                                NavigationLink("üê∫  „Ç≥„É©„É†„Éö„Éº„Ç∏ÔºàColumnPageÔºâ") { ColumnPage() }
                                    .buttonStyle(ColoredPillButtonStyle(color: .indigo, size: .compact, alpha: 0.20))
                                
                                Spacer(minLength: 8)
                            }
                        }
                        .padding(.horizontal, 12)
                        .padding(.top, 2)
                        .padding(.bottom,8)
                    }
                    // iPhone „ÅÆ„Éõ„Éº„É†„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Å´Ë¢´„Çâ„Å™„ÅÑ„Åü„ÇÅ„ÅÆ‚Äú‰∏ã„Éû„Éº„Ç∏„É≥‚Äù
                    .safeAreaInset(edge: .bottom) { Color.clear.frame(height: 12) }
                }
                // ‚Üê .navigationTitle „ÅØ‰ªò„Åë„Å™„ÅÑÔºàË°®Á¥ô„Å®ÈáçË§áÈò≤Ê≠¢Ôºâ
            }
        }
    }

    // ===== body „ÅÆÂ§ñ„Å´Âá∫„ÅôÁÆ± =====
    extension HomePage {
        // MARK: - Row helperÔºàpush ÊñπÂºèÔºâ
        @ViewBuilder
        private func posRow(_ pos: PartOfSpeech, title: String, color: Color) -> some View {
            Button { router.push(pos) } label: {
                HStack {
                    Text(title).foregroundStyle(color)
                    Spacer()
                    Image(systemName: "chevron.right").foregroundStyle(.secondary)
                }
                .padding(.vertical, 12)
            }
            .buttonStyle(.plain)
        }
        
        // MARK: - Â∞èÁâ©ÔºàÊ†û„Ç¢„Ç§„Ç≥„É≥Ôºâ
        private struct BookmarkColorItem: View {
            let color: Color
            var body: some View {
                Circle().fill(color).frame(width: 24, height: 24)
            }
        }
        
        // MARK: - Stub ÁîªÈù¢ÔºàÊú¨Áâ©„Åå„Åß„Åç„Åü„ÇâÂ∑Æ„ÅóÊõø„ÅàÔºâ
        private struct SpellingChallengeView: View {
            var body: some View { Text("Spelling Challenge stub") }
        }
        
        // My Collection ‰∏ÄË¶ß
        private struct MyCollectionView: View {
            @State private var refreshID = UUID()

            var body: some View {
                // ÂÆüË£ÖÂêç„Å´Âêà„Çè„Åõ„Å¶ÔºöfavoriteCards() or favoriteList()
                let cards = HomeworkStore.shared.favoriteList()
                
                Group {
                    if cards.isEmpty {
                        ContentUnavailableView("„Åæ„Å†„ÅÇ„Çä„Åæ„Åõ„Çì", systemImage: "heart")
                    } else {
                        POSFlashcardView(
                            title: "My Collection",
                            cards: cards,
                            accent: .pink,
                            background: Color(.systemBackground),
                            animalName: "index_chipmunk",
                            reversed: false,
                            onEdit: { _ in },                 // „Åì„Åì„ÅØÊú™‰ΩøÁî®„Å™„ÇâÁ©∫„ÅßOK
                            onDataChanged: { refreshID = UUID() } // ‚òÖ„Éà„Ç∞„É´ÊôÇ„Å´Âç≥Êõ¥Êñ∞
                        )
                    }
                }
                .id(refreshID)                          // ‚òÖ„Åì„Çå„Åß„Éì„É•„Éº„ÇíÂÜçË©ï‰æ°
                .navigationTitle("My Collection")
            }
        }

        // Ë¶ö„Åà„ÅüBOX ‰∏ÄË¶ß
        private struct LearnedBoxView: View {
            @State private var refreshID = UUID()
            var body: some View {
                let cards = HomeworkStore.shared.learnedList()   // ‚Üê ÂÆüË£ÖÂêç„ÅØ learnedList()
                Group {
                    if cards.isEmpty {
                        ContentUnavailableView("„Åæ„Å†„ÅÇ„Çä„Åæ„Åõ„Çì", systemImage: "checkmark.circle")
                    } else {
                        POSFlashcardView(
                            title: "Ë¶ö„Åà„ÅüBOX",
                            cards: cards,
                            accent: .green,
                            background: Color(.systemBackground),
                            animalName: "index_chipmunk",
                            reversed: false,
                            onEdit: { _ in },
                            onDataChanged: { refreshID = UUID() }   // ‚Üê „Éà„Ç∞„É´ÊôÇ„Å´Âç≥Êõ¥Êñ∞
                        )
                    }
                }
                .id(refreshID)
                .navigationTitle("Ë¶ö„Åà„ÅüBOX")
            }
        }
        
        private struct ColumnPage: View {
            var body: some View { Text("Column Page stub") }
        }
        
        // üÜï Â±•Ê≠¥‰∏ÄË¶ßÔºà‰ªÆÔºâ
        private struct HistoryAllView: View {
            var body: some View {
                List(0..<8) { _ in
                    HStack(alignment: .top, spacing: 12) {
                        Image(systemName: "square.fill")
                            .foregroundStyle(.green)
                        VStack(alignment: .leading, spacing: 4) {
                            Text("2025/10/02").font(.caption).foregroundStyle(.secondary)
                            Text("ÂÆøÈ°åÔºöÂêçË©ûÔºãÂΩ¢ÂÆπË©ûÔºà24Ë™ûÔºâ")
                        }
                    }
                    .padding(.vertical, 4)
                }
                .navigationTitle("ÂÆøÈ°å„ÅÆÂ±•Ê≠¥")
            }
        }
    }
    
    private struct WeeklySetMiniButton: View {
        @EnvironmentObject var hw: HomeworkState
        
        var body: some View {
            let p = hw.currentPair                     // „ÅÑ„Åæ„ÅÆÂìÅË©û„Éö„Ç¢
            
            NavigationLink {
                WeeklySetView(pair: p)
                    .environmentObject(hw)
            } label: {
                HStack(spacing: 6) {
                    Text("üóìÔ∏è‰ªäÈÄ±ÂàÜ„Å∏Ôºà\(p.parts[0].jaTitle)+\(p.parts[1].jaTitle)Ôºâ")
                }
                .font(.caption)
                .padding(.horizontal, 10)
                .padding(.vertical, 6)
                .background(.thinMaterial, in: Capsule())   // „ÉÅ„ÉÉ„ÉóÈ¢®
            }
            .buttonStyle(.plain)                              // „ÉÅ„ÉÉ„Éó„ÅÆË¶ã„ÅüÁõÆ„ÇíÁ∂≠ÊåÅ
        }
    }
  
    
 
